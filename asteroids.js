// Generated by CoffeeScript 1.6.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  $(function() {
    var Asteroid, Entity, Ship;
    Entity = (function() {
      function Entity() {}

      Entity.prototype.velX = 0;

      Entity.prototype.velY = 0;

      Entity.prototype.x = 0;

      Entity.prototype.y = 0;

      Entity.prototype.tick = function(maxWidth, maxHeight) {
        this.x += this.velX;
        this.y += this.velY;
        if (this.x > maxWidth) {
          this.x = -this.width / 2;
        }
        if (this.x < -this.width / 2) {
          this.x = maxWidth;
        }
        if (this.y > maxHeight) {
          this.y = -this.height / 2;
        }
        if (this.y < -this.height / 2) {
          return this.y = maxHeight;
        }
      };

      Entity.prototype.draw = function() {};

      return Entity;

    })();
    Ship = (function(_super) {
      __extends(Ship, _super);

      Ship.prototype.width = 20;

      Ship.prototype.height = 10;

      function Ship(x, y) {
        this.x = x;
        this.y = y;
      }

      Ship.prototype.draw = function(ctx) {
        ctx.save();
        ctx.translate(this.x, this.y);
        ctx.beginPath();
        ctx.moveTo(0, 0);
        ctx.lineTo(20, -10);
        ctx.lineTo(20, 10);
        ctx.closePath();
        ctx.strokeStyle = '#FF0000';
        ctx.stroke();
        return ctx.restore();
      };

      return Ship;

    })(Entity);
    Asteroid = (function(_super) {
      __extends(Asteroid, _super);

      Asteroid.prototype.width = 100;

      Asteroid.prototype.height = 100;

      Asteroid.prototype.image = null;

      function Asteroid(image, velX, velY) {
        this.image = image;
        this.velX = velX;
        this.velY = velY;
      }

      Asteroid.prototype.draw = function(ctx) {
        ctx.save();
        ctx.translate(this.x, this.y);
        ctx.drawImage(this.image, 0, 0);
        return ctx.restore();
      };

      return Asteroid;

    })(Entity);
    $.loadImage = function(url) {
      return $.Deferred(function(deferred) {
        var cleanup, image;
        image = new Image();
        image.src = url;
        image.onload = function() {
          cleanup();
          return deferred.resolve(image);
        };
        image.onerror = function(err) {
          cleanup();
          return deferred.reject("Unable to load " + url);
        };
        return cleanup = function() {
          image.onload = null;
          return image.onerror = null;
        };
      }).promise();
    };
    $.whenall = function(arr) {
      return $.when.apply($, arr).then(function() {
        return Array.prototype.slice.call(arguments);
      });
    };
    return $.whenall([$.loadImage('./images/asteroid1.png'), $.loadImage('./images/asteroid2.png'), $.loadImage('./images/asteroid3.png'), $.loadImage('./images/asteroid4.png')]).done(function(images) {
      var asteroids, canvas, ctx, entities, ship, _i, _results,
        _this = this;
      canvas = $('#gameScreen')[0];
      ctx = canvas.getContext('2d');
      ship = new Ship(window.innerWidth / 2, window.innerHeight / 2);
      asteroids = (function() {
        _results = [];
        for (_i = 1; _i <= 100; _i++){ _results.push(_i); }
        return _results;
      }).apply(this).map(function(i) {
        return new Asteroid(images[i % 4], Math.random() * 10 - Math.random() * 10, Math.random() * 10 - Math.random() * 10);
      });
      entities = [ship];
      Array.prototype.push.apply(entities, asteroids);
      return setInterval((function() {
        var entity, _j, _len, _results1;
        canvas.width = window.innerWidth;
        canvas.height = window.innerHeight;
        ctx.fillRect(0, 0, canvas.width, canvas.height);
        _results1 = [];
        for (_j = 0, _len = entities.length; _j < _len; _j++) {
          entity = entities[_j];
          entity.draw(ctx);
          _results1.push(entity.tick(window.innerWidth, window.innerHeight));
        }
        return _results1;
      }), 10);
    }).fail(function(err) {
      return console.error(err);
    });
  });

}).call(this);
