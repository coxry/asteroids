// Generated by CoffeeScript 1.8.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  $(function() {
    var Asteroid, Entity, Ship, canvas, ctx, loadImage;
    Entity = (function() {
      function Entity() {}

      Entity.prototype.velX = 0;

      Entity.prototype.velY = 0;

      Entity.prototype.x = 0;

      Entity.prototype.y = 0;

      Entity.prototype.move = function(dt, maxWidth, maxHeight) {
        this.x += this.velX * dt;
        this.y += this.velY * dt;
        if (this.x > maxWidth) {
          this.x = -this.width;
        }
        if (this.x < -this.width) {
          this.x = maxWidth;
        }
        if (this.y > maxHeight) {
          this.y = -this.height;
        }
        if (this.y < -this.height) {
          return this.y = maxHeight;
        }
      };

      return Entity;

    })();
    Ship = (function(_super) {
      __extends(Ship, _super);

      Ship.prototype.width = 20;

      Ship.prototype.height = 10;

      Ship.prototype.speed = 0.01;

      function Ship(x, y) {
        this.x = x;
        this.y = y;
      }

      Ship.prototype.updateVelocity = function(keys) {
        if (keys[38]) {
          this.velY -= this.speed;
        }
        if (keys[40]) {
          this.velY += this.speed;
        }
        if (keys[37]) {
          this.velX -= this.speed;
        }
        if (keys[39]) {
          return this.velX += this.speed;
        }
      };

      Ship.prototype.draw = function(ctx) {
        ctx.save();
        ctx.translate(this.x, this.y);
        ctx.beginPath();
        ctx.moveTo(0, 0);
        ctx.lineTo(20, -10);
        ctx.lineTo(20, 10);
        ctx.closePath();
        ctx.strokeStyle = '#FF0000';
        ctx.stroke();
        return ctx.restore();
      };

      return Ship;

    })(Entity);
    Asteroid = (function(_super) {
      __extends(Asteroid, _super);

      Asteroid.prototype.width = 100;

      Asteroid.prototype.height = 100;

      Asteroid.prototype.image = null;

      function Asteroid(image, velX, velY) {
        this.image = image;
        this.velX = velX;
        this.velY = velY;
      }

      Asteroid.prototype.draw = function(ctx) {
        ctx.save();
        ctx.translate(this.x, this.y);
        ctx.drawImage(this.image, 0, 0);
        return ctx.restore();
      };

      return Asteroid;

    })(Entity);
    loadImage = function(url) {
      return new Promise(function(resolve, reject) {
        var cleanup, image;
        image = new Image();
        image.src = url;
        image.onload = function() {
          cleanup();
          return resolve(image);
        };
        image.onerror = function(err) {
          cleanup();
          return reject(Error("Unable to load " + url));
        };
        return cleanup = function() {
          image.onload = null;
          return image.onerror = null;
        };
      });
    };
    canvas = $('#gameScreen').first();
    ctx = canvas[0].getContext('2d');
    return Promise.all([loadImage('./images/asteroid1.png'), loadImage('./images/asteroid2.png'), loadImage('./images/asteroid3.png'), loadImage('./images/asteroid4.png')]).then(function(images) {
      var asteroids, entities, frames, gameLoop, keys, oldTime, ship, time;
      ship = new Ship(canvas.attr('width') / 2, canvas.attr('height') / 2);
      asteroids = [1, 2, 3, 4, 5].map(function(i) {
        return new Asteroid(images[i % 4], Math.random() / 2 - Math.random() / 2, Math.random() / 2 - Math.random() / 2);
      });
      entities = [ship];
      Array.prototype.push.apply(entities, asteroids);
      keys = [];
      window.onkeydown = function(event) {
        return keys[event.keyCode] = true;
      };
      window.onkeyup = function(event) {
        return keys[event.keyCode] = false;
      };
      frames = 0;
      time = null;
      oldTime = new Date().getTime();
      gameLoop = (function() {
        var ch, cw, dt, entity, now, _i, _len;
        now = new Date().getTime();
        dt = now - (time || now);
        time = now;
        if (time - oldTime > 1000) {
          oldTime = time;
          console.debug(frames);
          frames = 0;
        }
        cw = parseInt(canvas.attr('width'));
        ch = parseInt(canvas.attr('height'));
        ctx.fillRect(0, 0, cw, ch);
        ship.updateVelocity(keys);
        for (_i = 0, _len = entities.length; _i < _len; _i++) {
          entity = entities[_i];
          entity.draw(ctx);
          entity.move(dt, cw, ch);
        }
        frames = frames + 1;
        return window.requestAnimationFrame(gameLoop);
      });
      return gameLoop();
    }, function(err) {
      return console.error(err);
    });
  });

}).call(this);
